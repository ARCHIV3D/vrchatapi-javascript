/* tslint:disable */
/* eslint-disable */
/**
 * VRChat API Documentation
 * ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)  # VRChat API Documentation This project is an [OPEN Open Source Project](https://openopensource.org)  Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.  ## Disclaimer  This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.  > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:** > * We do not provide documentation or support for the API. > * Do not make queries to the API more than once per 60 seconds. > * Abuse of the API may result in account termination. > * Access to API endpoints may break at any given time, with no warning.  As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.  ## Get in touch with us!  [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: me@ruby.js.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * VRChat\'s office address
     * @type {string}
     * @memberof Config
     */
    address: string;
    /**
     * PSA, Public Announcements
     * @type {Set<ConfigAnnouncements>}
     * @memberof Config
     */
    announcements: Set<ConfigAnnouncements>;
    /**
     * apiKey to be used for all other requests
     * @type {string}
     * @memberof Config
     */
    apiKey: string;
    /**
     * Game name
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    appName: string;
    /**
     * Build tag of the API server
     * @type {string}
     * @memberof Config
     */
    buildVersionTag: string;
    /**
     * apiKey to be used for all other requests
     * @type {string}
     * @memberof Config
     */
    clientApiKey: string;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    clientBPSCeiling?: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    clientDisconnectTimeout?: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    clientReservedPlayerBPS?: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    clientSentCountAllowance?: number;
    /**
     * VRChat\'s contact email
     * @type {string}
     * @memberof Config
     */
    contactEmail: string;
    /**
     * VRChat\'s copyright-issues-related email
     * @type {string}
     * @memberof Config
     */
    copyrightEmail: string;
    /**
     * Current version number of the Terms of Service
     * @type {number}
     * @memberof Config
     */
    currentTOSVersion: number;
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    defaultAvatar: string;
    /**
     * 
     * @type {DeploymentGroup}
     * @memberof Config
     */
    deploymentGroup: DeploymentGroup;
    /**
     * Version number for game development build
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    devAppVersionStandalone: string;
    /**
     * Developer Download link
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    devDownloadLinkWindows: string;
    /**
     * Link to download the development SDK, use downloadUrls instead
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    devSdkUrl: string;
    /**
     * Version of the development SDK
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    devSdkVersion: string;
    /**
     * Version number for server development build
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    devServerVersionStandalone: string;
    /**
     * Toggles if copying avatars should be disabled
     * @type {boolean}
     * @memberof Config
     */
    disableAvatarCopying: boolean;
    /**
     * Toggles if avatar gating should be disabled. Avatar gating restricts uploading of avatars to people with the `system_avatar_access` Tag or `admin_avatar_access` Tag
     * @type {boolean}
     * @memberof Config
     */
    disableAvatarGating: boolean;
    /**
     * Toggles if the Community Labs should be disabled
     * @type {boolean}
     * @memberof Config
     */
    disableCommunityLabs: boolean;
    /**
     * Toggles if promotion out of Community Labs should be disabled
     * @type {boolean}
     * @memberof Config
     */
    disableCommunityLabsPromotion: boolean;
    /**
     * Unknown
     * @type {boolean}
     * @memberof Config
     */
    disableEmail?: boolean;
    /**
     * Toggles if Analytics should be disabled (this sreportedly not used in the Client)
     * @type {boolean}
     * @memberof Config
     */
    disableEventStream: boolean;
    /**
     * Toggles if feedback gating should be disabled. Feedback gating restricts submission of feedback (reporting a World or User) to people with the `system_feedback_access` Tag.
     * @type {boolean}
     * @memberof Config
     */
    disableFeedbackGating: boolean;
    /**
     * Unknown
     * @type {boolean}
     * @memberof Config
     */
    disableHello?: boolean;
    /**
     * Toggles if new user account registration should be disabled
     * @type {boolean}
     * @memberof Config
     */
    disableRegistration: boolean;
    /**
     * Toggles if Steam Networking should be disabled. VRChat these days uses Photon Unity Networking (PUN) instead.
     * @type {boolean}
     * @memberof Config
     */
    disableSteamNetworking: boolean;
    /**
     * Toggles if 2FA should be disabled.
     * @type {boolean}
     * @memberof Config
     * @deprecated
     */
    disableTwoFactorAuth: boolean;
    /**
     * Toggles if Udon should be universally disabled in-game.
     * @type {boolean}
     * @memberof Config
     */
    disableUdon: boolean;
    /**
     * Toggles if account upgrading \"linking with Steam/Oculus\" should be disabled.
     * @type {boolean}
     * @memberof Config
     */
    disableUpgradeAccount: boolean;
    /**
     * Download link for game on the Oculus Rift website.
     * @type {string}
     * @memberof Config
     */
    downloadLinkWindows: string;
    /**
     * 
     * @type {ConfigDownloadUrls}
     * @memberof Config
     */
    downloadUrls: ConfigDownloadUrls;
    /**
     * Array of DynamicWorldRow objects, used by the game to display the list of world rows
     * @type {Set<ConfigDynamicWorldRows>}
     * @memberof Config
     */
    dynamicWorldRows: Set<ConfigDynamicWorldRows>;
    /**
     * 
     * @type {ConfigEvents}
     * @memberof Config
     */
    events: ConfigEvents;
    /**
     * Unknown
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    gearDemoRoomId: string;
    /**
     * Redirect target if you try to open the base API domain in your browser
     * @type {string}
     * @memberof Config
     */
    homepageRedirectTarget: string;
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    homeWorldId: string;
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    hubWorldId: string;
    /**
     * VRChat\'s job application email
     * @type {string}
     * @memberof Config
     */
    jobsEmail: string;
    /**
     * MOTD
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    messageOfTheDay: string;
    /**
     * VRChat\'s moderation related email
     * @type {string}
     * @memberof Config
     */
    moderationEmail: string;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    moderationQueryPeriod: number;
    /**
     * Used in-game to notify a user they aren\'t allowed to select avatars in private worlds
     * @type {string}
     * @memberof Config
     */
    notAllowedToSelectAvatarInPrivateWorldMessage: string;
    /**
     * Extra [plugin](https://doc.photonengine.com/en-us/server/current/plugins/manual) to run in each instance
     * @type {string}
     * @memberof Config
     */
    plugin: string;
    /**
     * Version number for game release build
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    releaseAppVersionStandalone: string;
    /**
     * Link to download the release SDK
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    releaseSdkUrl: string;
    /**
     * Version of the release SDK
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    releaseSdkVersion: string;
    /**
     * Version number for server release build
     * @type {string}
     * @memberof Config
     * @deprecated
     */
    releaseServerVersionStandalone: string;
    /**
     * Link to the developer FAQ
     * @type {string}
     * @memberof Config
     */
    sdkDeveloperFaqUrl: string;
    /**
     * Link to the official VRChat Discord
     * @type {string}
     * @memberof Config
     */
    sdkDiscordUrl: string;
    /**
     * Used in the SDK to notify a user they aren\'t allowed to upload avatars/worlds yet
     * @type {string}
     * @memberof Config
     */
    sdkNotAllowedToPublishMessage: string;
    /**
     * Unity version supported by the SDK
     * @type {string}
     * @memberof Config
     */
    sdkUnityVersion: string;
    /**
     * Server name of the API server currently responding
     * @type {string}
     * @memberof Config
     */
    serverName: string;
    /**
     * VRChat\'s support email
     * @type {string}
     * @memberof Config
     */
    supportEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    timeOutWorldId: string;
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    tutorialWorldId: string;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    updateRateMsMaximum: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    updateRateMsMinimum: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    updateRateMsNormal: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    updateRateMsUdonManual: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    uploadAnalysisPercent: number;
    /**
     * List of allowed URLs that bypass the \"Allow untrusted URL\'s\" setting in-game
     * @type {Array<string>}
     * @memberof Config
     */
    urlList: Array<string>;
    /**
     * Unknown
     * @type {boolean}
     * @memberof Config
     */
    useReliableUdpForVoice: boolean;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    userUpdatePeriod: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    userVerificationDelay: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    userVerificationRetry: number;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    userVerificationTimeout: number;
    /**
     * Download link for game on the Steam website.
     * @type {string}
     * @memberof Config
     */
    viveWindowsUrl: string;
    /**
     * List of allowed URLs that are allowed to host avatar assets
     * @type {Array<string>}
     * @memberof Config
     */
    whiteListedAssetUrls: Array<string>;
    /**
     * Unknown
     * @type {number}
     * @memberof Config
     */
    worldUpdatePeriod: number;
    /**
     * Currently used youtube-dl.exe hash in SHA-256-delimited format
     * @type {string}
     * @memberof Config
     */
    youtubedl_hash: string;
    /**
     * Currently used youtube-dl.exe version
     * @type {string}
     * @memberof Config
     */
    youtubedl_version: string;
}
/**
 * Public Announcement
 * @export
 * @interface ConfigAnnouncements
 */
export interface ConfigAnnouncements {
    /**
     * Announcement name
     * @type {string}
     * @memberof ConfigAnnouncements
     */
    name: string;
    /**
     * Announcement text
     * @type {string}
     * @memberof ConfigAnnouncements
     */
    text: string;
}
/**
 * Download links for various development assets
 * @export
 * @interface ConfigDownloadUrls
 */
export interface ConfigDownloadUrls {
    /**
     * Download link for legacy SDK2
     * @type {string}
     * @memberof ConfigDownloadUrls
     * @deprecated
     */
    sdk2: string;
    /**
     * Download link for SDK3 for Avatars
     * @type {string}
     * @memberof ConfigDownloadUrls
     */
    sdk3_avatars: string;
    /**
     * Download link for SDK3 for Worlds
     * @type {string}
     * @memberof ConfigDownloadUrls
     */
    sdk3_worlds: string;
}
/**
 * 
 * @export
 * @interface ConfigDynamicWorldRows
 */
export interface ConfigDynamicWorldRows {
    /**
     * 
     * @type {number}
     * @memberof ConfigDynamicWorldRows
     */
    index: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigDynamicWorldRows
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigDynamicWorldRows
     */
    platform: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigDynamicWorldRows
     */
    sortHeading: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigDynamicWorldRows
     */
    sortOrder: string;
    /**
     * 
     * @type {string}
     * @memberof ConfigDynamicWorldRows
     */
    sortOwnership: string;
    /**
     * Tag to filter worlds for this row
     * @type {string}
     * @memberof ConfigDynamicWorldRows
     */
    tag?: string;
}
/**
 * 
 * @export
 * @interface ConfigEvents
 */
export interface ConfigEvents {
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    distanceClose: number;
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    distanceFactor: number;
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    distanceFar: number;
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    groupDistance: number;
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    maximumBunchSize: number;
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    notVisibleFactor: number;
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    playerOrderBucketSize: number;
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    playerOrderFactor: number;
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    slowUpdateFactorThreshold: number;
    /**
     * Unknown
     * @type {number}
     * @memberof ConfigEvents
     */
    viewSegmentLength: number;
}
/**
 * 
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    userIcon: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    bio: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    bioLinks: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    profilePicOverride: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    statusDescription: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    pastDisplayNames: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    hasEmail: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    hasPendingEmail: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    obfuscatedEmail: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    obfuscatedPendingEmail: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    emailVerified: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    hasBirthday: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    unsubscribe: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    statusHistory: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    statusFirstTime: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    friends: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    friendGroupNames: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    currentAvatarImageUrl: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    currentAvatarThumbnailImageUrl: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    fallbackAvatar: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    currentAvatar: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    currentAvatarAssetUrl: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    accountDeletionDate?: string;
    /**
     * 
     * @type {number}
     * @memberof CurrentUser
     */
    acceptedTOSVersion: number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    steamId: string;
    /**
     * 
     * @type {object}
     * @memberof CurrentUser
     */
    steamDetails: object;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    oculusId: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    hasLoggedInFromClient: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    homeLocation: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    twoFactorAuthEnabled: boolean;
    /**
     * 
     * @type {UserState}
     * @memberof CurrentUser
     */
    state: UserState;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    tags: Array<string>;
    /**
     * 
     * @type {DeveloperType}
     * @memberof CurrentUser
     */
    developerType: DeveloperType;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    last_login: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    last_platform: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    allowAvatarCopying: boolean;
    /**
     * 
     * @type {UserStatus}
     * @memberof CurrentUser
     */
    status: UserStatus;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    date_joined: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUser
     */
    isFriend: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    friendKey: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    onlineFriends: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    activeFriends: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUser
     */
    offlineFriends: Array<string>;
}
/**
 * Used to identify which API deployment cluster is currently responding.  `blue` and `green` are used by Production. `grape`and `cherry` are used during Development.  [Blue Green Deployment by Martin Fowler](https://martinfowler.com/bliki/BlueGreenDeployment.html)
 * @export
 * @enum {string}
 */

export enum DeploymentGroup {
    Blue = 'blue',
    Green = 'green',
    Grape = 'grape',
    Cherry = 'cherry'
}

/**
 * \"none\" User is a normal user \"trusted\" Unknown \"internal\" Is a VRChat Developer \"moderator\" Is a VRChat Moderator  Staff can hide their developerType at will.
 * @export
 * @enum {string}
 */

export enum DeveloperType {
    None = 'none',
    Trusted = 'trusted',
    Internal = 'internal',
    Moderator = 'moderator'
}

/**
 * 
 * @export
 * @interface FileData
 */
export interface FileData {
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    fileName: string;
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    md5: string;
    /**
     * 
     * @type {number}
     * @memberof FileData
     */
    sizeInBytes: number;
    /**
     * 
     * @type {FileStatus}
     * @memberof FileData
     */
    status: FileStatus;
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    category: FileDataCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof FileData
     */
    uploadId: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FileDataCategoryEnum {
    Multipart = 'multipart',
    Queued = 'queued',
    Simple = 'simple'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum FileStatus {
    Waiting = 'waiting',
    Complete = 'complete',
    None = 'none'
}

/**
 * 
 * @export
 * @interface FileVersion
 */
export interface FileVersion {
    /**
     * Incremental version counter, can only be increased.
     * @type {number}
     * @memberof FileVersion
     */
    version: number;
    /**
     * 
     * @type {FileStatus}
     * @memberof FileVersion
     */
    status: FileStatus;
    /**
     * 
     * @type {string}
     * @memberof FileVersion
     */
    created_at: string;
    /**
     * 
     * @type {FileData}
     * @memberof FileVersion
     */
    file?: FileData;
    /**
     * 
     * @type {FileData}
     * @memberof FileVersion
     */
    delta?: FileData;
    /**
     * 
     * @type {FileData}
     * @memberof FileVersion
     */
    signature?: FileData;
    /**
     * Usually only present if `true`
     * @type {boolean}
     * @memberof FileVersion
     */
    deleted?: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    code: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    code: string;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    birthday?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject2
     */
    acceptedTOSVersion?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject2
     */
    tags?: Array<string>;
    /**
     * 
     * @type {UserStatus}
     * @memberof InlineObject2
     */
    status?: UserStatus;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    statusDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    bio?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject2
     */
    bioLinks?: Array<string>;
    /**
     * MUST be a valid VRChat /file/ url.
     * @type {string}
     * @memberof InlineObject2
     */
    userIcon?: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    name: string;
    /**
     * 
     * @type {MIMEType}
     * @memberof InlineObject3
     */
    mimeType: MIMEType;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    extension: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject3
     */
    tags?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * Array of ETags uploaded.
     * @type {Set<string>}
     * @memberof InlineObject4
     */
    etags?: Set<string>;
    /**
     * Always a zero in string form, despite how many parts uploaded.
     * @type {string}
     * @memberof InlineObject4
     * @deprecated
     */
    nextPartNumber: InlineObject4NextPartNumberEnum;
    /**
     * Always a zero in string form, despite how many parts uploaded.
     * @type {string}
     * @memberof InlineObject4
     * @deprecated
     */
    maxParts: InlineObject4MaxPartsEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObject4NextPartNumberEnum {
    _0 = '0'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineObject4MaxPartsEnum {
    _0 = '0'
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200
     */
    ok: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    token: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    verified: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2002
     */
    ok: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    serverName: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    buildVersionTag: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2003
     */
    isFriend: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2003
     */
    outgoingRequest: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2003
     */
    incomingRequest: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004
     */
    uploadId: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004
     */
    fileName: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004
     */
    nextPartNumber: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004
     */
    maxParts: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineResponse2004
     */
    parts: Array<object>;
    /**
     * Unknown
     * @type {Array<object>}
     * @memberof InlineResponse2004
     */
    etags: Array<object>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005
     */
    url: string;
}
/**
 * 
 * @export
 * @interface InlineResponse401
 */
export interface InlineResponse401 {
    /**
     * 
     * @type {Error}
     * @memberof InlineResponse401
     */
    error: Error;
}
/**
 * 
 * @export
 * @interface LimitedUser
 */
export interface LimitedUser {
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    bio?: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    userIcon: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    profilePicOverride: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    statusDescription: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    currentAvatarImageUrl: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    currentAvatarThumbnailImageUrl: string;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    fallbackAvatar: string;
    /**
     * 
     * @type {DeveloperType}
     * @memberof LimitedUser
     */
    developerType: DeveloperType;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    last_platform: string;
    /**
     * 
     * @type {UserStatus}
     * @memberof LimitedUser
     */
    status: UserStatus;
    /**
     * 
     * @type {boolean}
     * @memberof LimitedUser
     */
    isFriend: boolean;
    /**
     * 
     * @type {string}
     * @memberof LimitedUser
     */
    location: string;
    /**
     * Always empty
     * @type {Array<string>}
     * @memberof LimitedUser
     */
    tags: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum MIMEType {
    Imagejpeg = 'image⁄jpeg',
    Imagejpg = 'image⁄jpg',
    Imagepng = 'image⁄png',
    Imagewebp = 'image⁄webp',
    Imagegif = 'image⁄gif',
    Imagebmp = 'image⁄bmp',
    Imagesvgxml = 'image⁄svg＋xml',
    Imagetiff = 'image⁄tiff',
    ApplicationxAvatar = 'application⁄x-avatar',
    ApplicationxWorld = 'application⁄x-world',
    Applicationgzip = 'application⁄gzip',
    ApplicationXRsyncSignature = 'application/x-rsync-signature',
    ApplicationXRsyncDelta = 'application/x-rsync-delta',
    ApplicationOctetStream = 'application/octet-stream'
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {Response}
     * @memberof ModelError
     */
    error?: Response;
}
/**
 * 
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    ownerId: string;
    /**
     * 
     * @type {MIMEType}
     * @memberof ModelFile
     */
    mimeType: MIMEType;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    extension: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModelFile
     */
    tags: Array<string>;
    /**
     * 
     * @type {Set<FileVersion>}
     * @memberof ModelFile
     */
    versions: Set<FileVersion>;
}
/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    senderUserId: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    senderUsername: string;
    /**
     * 
     * @type {NotificationType}
     * @memberof Notification
     */
    type: NotificationType;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    message: string;
    /**
     * **NOTICE:** This is not a JSON object, this is a json **encoded** object, meaning you have to json-de-encode to get the NotificationDetail object depending on the NotificationType.
     * @type {string}
     * @memberof Notification
     */
    details: string;
    /**
     * 
     * @type {boolean}
     * @memberof Notification
     */
    seen: boolean;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    created_at: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum NotificationType {
    All = 'all',
    Broadcast = 'broadcast',
    FriendRequest = 'friendRequest',
    Invite = 'invite',
    Message = 'message',
    RequestInvite = 'RequestInvite',
    Votetokick = 'votetokick'
}

/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    status_code: number;
}
/**
 * 
 * @export
 * @interface Success
 */
export interface Success {
    /**
     * 
     * @type {Response}
     * @memberof Success
     */
    success?: Response;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userIcon: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    bio: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    bioLinks: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    profilePicOverride: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    statusDescription: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    currentAvatarImageUrl: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    currentAvatarThumbnailImageUrl: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    fallbackAvatar: string;
    /**
     * 
     * @type {UserState}
     * @memberof User
     */
    state: UserState;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    tags: Array<string>;
    /**
     * 
     * @type {DeveloperType}
     * @memberof User
     */
    developerType: DeveloperType;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    last_login: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    last_platform: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    allowAvatarCopying: boolean;
    /**
     * 
     * @type {UserStatus}
     * @memberof User
     */
    status: UserStatus;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    date_joined: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isFriend: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    friendKey: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    worldId: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    instanceId: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    location: string;
}
/**
 * * \"online\" User is online in VRChat * \"active\" User is online, but not in VRChat * \"offline\" User is offline
 * @export
 * @enum {string}
 */

export enum UserState {
    Offline = 'offline',
    Active = 'active',
    Online = 'online'
}

/**
 * Defines the User\'s current status, for example \"ask me\", \"join me\" or \"offline. This status is a combined indicator of their online activity and privacy preference.
 * @export
 * @enum {string}
 */

export enum UserStatus {
    Active = 'active',
    JoinMe = 'join me',
    AskMe = 'ask me',
    Busy = 'busy',
    Offline = 'offline'
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
         * @summary Delete User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserById', 'userId', userId)
            const localVarPath = `/user/{userId}/delete`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login and/or Get user data from your VRChat account.  If `Authorization` header is present then a new login session will be generated, and a new `auth` cookie is returned.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie whenever you can, and avoid sending the Authorization header unless strictly neccesary. While the exact number of simultaneous open sessions is secret, expect to **very fast** run into the rate-limit and be temporarily blocked from making new sessions until the old ones expire.
         * @summary Login and/or Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required

            // authentication authHeader required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication twoFactorAuthCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalidates the auth cookie.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify2FA: async (inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/twofactorauth/totp/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify whether the currently provided Auth Token is valid.
         * @summary Verify Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthToken: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code with Recovery code
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRecoveryCode: async (inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/twofactorauth/otp/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
         * @summary Delete User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserById(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserById(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Login and/or Get user data from your VRChat account.  If `Authorization` header is present then a new login session will be generated, and a new `auth` cookie is returned.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie whenever you can, and avoid sending the Authorization header unless strictly neccesary. While the exact number of simultaneous open sessions is secret, expect to **very fast** run into the rate-limit and be temporarily blocked from making new sessions until the old ones expire.
         * @summary Login and/or Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Invalidates the auth cookie.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verify2FA(inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verify2FA(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify whether the currently provided Auth Token is valid.
         * @summary Verify Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAuthToken(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAuthToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code with Recovery code
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyRecoveryCode(inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyRecoveryCode(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
         * @summary Delete User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById(userId: string, options?: any): AxiosPromise<CurrentUser> {
            return localVarFp.deleteUserById(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Login and/or Get user data from your VRChat account.  If `Authorization` header is present then a new login session will be generated, and a new `auth` cookie is returned.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie whenever you can, and avoid sending the Authorization header unless strictly neccesary. While the exact number of simultaneous open sessions is secret, expect to **very fast** run into the rate-limit and be temporarily blocked from making new sessions until the old ones expire.
         * @summary Login and/or Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<CurrentUser> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalidates the auth cookie.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<Success> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify2FA(inlineObject?: InlineObject, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.verify2FA(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify whether the currently provided Auth Token is valid.
         * @summary Verify Auth Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthToken(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.verifyAuthToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
         * @summary Verify 2FA code with Recovery code
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRecoveryCode(inlineObject1?: InlineObject1, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.verifyRecoveryCode(inlineObject1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.  **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.  **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
     * @summary Delete User
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public deleteUserById(userId: string, options?: any) {
        return AuthenticationApiFp(this.configuration).deleteUserById(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login and/or Get user data from your VRChat account.  If `Authorization` header is present then a new login session will be generated, and a new `auth` cookie is returned.  **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie whenever you can, and avoid sending the Authorization header unless strictly neccesary. While the exact number of simultaneous open sessions is secret, expect to **very fast** run into the rate-limit and be temporarily blocked from making new sessions until the old ones expire.
     * @summary Login and/or Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getCurrentUser(options?: any) {
        return AuthenticationApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalidates the auth cookie.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logout(options?: any) {
        return AuthenticationApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
     * @summary Verify 2FA code
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verify2FA(inlineObject?: InlineObject, options?: any) {
        return AuthenticationApiFp(this.configuration).verify2FA(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify whether the currently provided Auth Token is valid.
     * @summary Verify Auth Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyAuthToken(options?: any) {
        return AuthenticationApiFp(this.configuration).verifyAuthToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
     * @summary Verify 2FA code with Recovery code
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public verifyRecoveryCode(inlineObject1?: InlineObject1, options?: any) {
        return AuthenticationApiFp(this.configuration).verifyRecoveryCode(inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new File object
         * @summary Create File
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile: async (inlineObject3?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.
         * @summary Create File Version
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileVersion: async (fileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('createFileVersion', 'fileId', fileId)
            const localVarPath = `/file/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a File object.
         * @summary Delete File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (fileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteFile', 'fileId', fileId)
            const localVarPath = `/file/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific version of a file. You can only delete the latest version.
         * @summary Delete File Version
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileVersion: async (fileId: string, versionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteFileVersion', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('deleteFileVersion', 'versionId', versionId)
            const localVarPath = `/file/{fileId}/{versionId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
         * @summary Download File Version
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileVersion: async (fileId: string, versionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('downloadFileVersion', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('downloadFileVersion', 'versionId', versionId)
            const localVarPath = `/file/{fileId}/{versionId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finish an upload of a FileData. This will mark it as \"complete\". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.
         * @summary Finish FileData Upload
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {'file' | 'signature' | 'delta'} fileType 
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishFileDataUpload: async (fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', inlineObject4?: InlineObject4, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('finishFileDataUpload', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('finishFileDataUpload', 'versionId', versionId)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('finishFileDataUpload', 'fileType', fileType)
            const localVarPath = `/file/{fileId}/{versionId}/{fileType}/finish`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)))
                .replace(`{${"fileType"}}`, encodeURIComponent(String(fileType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows general information about the \"File\" object. Each File can have several \"Version\"\'s, and each Version can have multiple real files or \"Data\" blobs.
         * @summary Show File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: async (fileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFile', 'fileId', fileId)
            const localVarPath = `/file/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.
         * @summary Check FileData Upload Status
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {'file' | 'signature' | 'delta'} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDataUploadStatus: async (fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFileDataUploadStatus', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('getFileDataUploadStatus', 'versionId', versionId)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('getFileDataUploadStatus', 'fileType', fileType)
            const localVarPath = `/file/{fileId}/{versionId}/{fileType}/status`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)))
                .replace(`{${"fileType"}}`, encodeURIComponent(String(fileType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of files
         * @summary List Files
         * @param {string} [tag] Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default.
         * @param {string} [userId] UserID, will always generate a 500 permission error.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles: async (tag?: string, userId?: string, n?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS\'s REST documentation on \"PUT Object to S3\" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.  **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
         * @summary Start FileData Upload
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {'file' | 'signature' | 'delta'} fileType 
         * @param {number} partNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startFileDataUpload: async (fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', partNumber: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('startFileDataUpload', 'fileId', fileId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('startFileDataUpload', 'versionId', versionId)
            // verify required parameter 'fileType' is not null or undefined
            assertParamExists('startFileDataUpload', 'fileType', fileType)
            // verify required parameter 'partNumber' is not null or undefined
            assertParamExists('startFileDataUpload', 'partNumber', partNumber)
            const localVarPath = `/file/{fileId}/{versionId}/{fileType}/start`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)))
                .replace(`{${"fileType"}}`, encodeURIComponent(String(fileType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required

            if (partNumber !== undefined) {
                localVarQueryParameter['partNumber'] = partNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new File object
         * @summary Create File
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFile(inlineObject3?: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFile(inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.
         * @summary Create File Version
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFileVersion(fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFileVersion(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a File object.
         * @summary Delete File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific version of a file. You can only delete the latest version.
         * @summary Delete File Version
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFileVersion(fileId: string, versionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFileVersion(fileId, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
         * @summary Download File Version
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileVersion(fileId: string, versionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileVersion(fileId, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finish an upload of a FileData. This will mark it as \"complete\". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.
         * @summary Finish FileData Upload
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {'file' | 'signature' | 'delta'} fileType 
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finishFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', inlineObject4?: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finishFileDataUpload(fileId, versionId, fileType, inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows general information about the \"File\" object. Each File can have several \"Version\"\'s, and each Version can have multiple real files or \"Data\" blobs.
         * @summary Show File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFile(fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.
         * @summary Check FileData Upload Status
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {'file' | 'signature' | 'delta'} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileDataUploadStatus(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileDataUploadStatus(fileId, versionId, fileType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of files
         * @summary List Files
         * @param {string} [tag] Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default.
         * @param {string} [userId] UserID, will always generate a 500 permission error.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiles(tag?: string, userId?: string, n?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFiles(tag, userId, n, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS\'s REST documentation on \"PUT Object to S3\" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.  **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
         * @summary Start FileData Upload
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {'file' | 'signature' | 'delta'} fileType 
         * @param {number} partNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', partNumber: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startFileDataUpload(fileId, versionId, fileType, partNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * Creates a new File object
         * @summary Create File
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(inlineObject3?: InlineObject3, options?: any): AxiosPromise<any> {
            return localVarFp.createFile(inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.
         * @summary Create File Version
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileVersion(fileId: string, options?: any): AxiosPromise<any> {
            return localVarFp.createFileVersion(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a File object.
         * @summary Delete File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(fileId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.deleteFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific version of a file. You can only delete the latest version.
         * @summary Delete File Version
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileVersion(fileId: string, versionId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteFileVersion(fileId, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
         * @summary Download File Version
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileVersion(fileId: string, versionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.downloadFileVersion(fileId, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Finish an upload of a FileData. This will mark it as \"complete\". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.
         * @summary Finish FileData Upload
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {'file' | 'signature' | 'delta'} fileType 
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', inlineObject4?: InlineObject4, options?: any): AxiosPromise<any> {
            return localVarFp.finishFileDataUpload(fileId, versionId, fileType, inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows general information about the \"File\" object. Each File can have several \"Version\"\'s, and each Version can have multiple real files or \"Data\" blobs.
         * @summary Show File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(fileId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.
         * @summary Check FileData Upload Status
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {'file' | 'signature' | 'delta'} fileType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDataUploadStatus(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getFileDataUploadStatus(fileId, versionId, fileType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of files
         * @summary List Files
         * @param {string} [tag] Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default.
         * @param {string} [userId] UserID, will always generate a 500 permission error.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles(tag?: string, userId?: string, n?: number, offset?: number, options?: any): AxiosPromise<Array<any>> {
            return localVarFp.getFiles(tag, userId, n, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS\'s REST documentation on \"PUT Object to S3\" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.  **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
         * @summary Start FileData Upload
         * @param {string} fileId 
         * @param {number} versionId 
         * @param {'file' | 'signature' | 'delta'} fileType 
         * @param {number} partNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', partNumber: number, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.startFileDataUpload(fileId, versionId, fileType, partNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * Creates a new File object
     * @summary Create File
     * @param {InlineObject3} [inlineObject3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public createFile(inlineObject3?: InlineObject3, options?: any) {
        return FilesApiFp(this.configuration).createFile(inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.
     * @summary Create File Version
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public createFileVersion(fileId: string, options?: any) {
        return FilesApiFp(this.configuration).createFileVersion(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a File object.
     * @summary Delete File
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public deleteFile(fileId: string, options?: any) {
        return FilesApiFp(this.configuration).deleteFile(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific version of a file. You can only delete the latest version.
     * @summary Delete File Version
     * @param {string} fileId 
     * @param {number} versionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public deleteFileVersion(fileId: string, versionId: number, options?: any) {
        return FilesApiFp(this.configuration).deleteFileVersion(fileId, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Downloads the file with the provided version number.  **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.  **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
     * @summary Download File Version
     * @param {string} fileId 
     * @param {number} versionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public downloadFileVersion(fileId: string, versionId: number, options?: any) {
        return FilesApiFp(this.configuration).downloadFileVersion(fileId, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finish an upload of a FileData. This will mark it as \"complete\". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.
     * @summary Finish FileData Upload
     * @param {string} fileId 
     * @param {number} versionId 
     * @param {'file' | 'signature' | 'delta'} fileType 
     * @param {InlineObject4} [inlineObject4] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public finishFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', inlineObject4?: InlineObject4, options?: any) {
        return FilesApiFp(this.configuration).finishFileDataUpload(fileId, versionId, fileType, inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows general information about the \"File\" object. Each File can have several \"Version\"\'s, and each Version can have multiple real files or \"Data\" blobs.
     * @summary Show File
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFile(fileId: string, options?: any) {
        return FilesApiFp(this.configuration).getFile(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.
     * @summary Check FileData Upload Status
     * @param {string} fileId 
     * @param {number} versionId 
     * @param {'file' | 'signature' | 'delta'} fileType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFileDataUploadStatus(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', options?: any) {
        return FilesApiFp(this.configuration).getFileDataUploadStatus(fileId, versionId, fileType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of files
     * @summary List Files
     * @param {string} [tag] Tag, for example \&quot;icon\&quot; or \&quot;gallery\&quot;, not included by default.
     * @param {string} [userId] UserID, will always generate a 500 permission error.
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFiles(tag?: string, userId?: string, n?: number, offset?: number, options?: any) {
        return FilesApiFp(this.configuration).getFiles(tag, userId, n, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS\'s REST documentation on \"PUT Object to S3\" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.  **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
     * @summary Start FileData Upload
     * @param {string} fileId 
     * @param {number} versionId 
     * @param {'file' | 'signature' | 'delta'} fileType 
     * @param {number} partNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public startFileDataUpload(fileId: string, versionId: number, fileType: 'file' | 'signature' | 'delta', partNumber: number, options?: any) {
        return FilesApiFp(this.configuration).startFileDataUpload(fileId, versionId, fileType, partNumber, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FriendsApi - axios parameter creator
 * @export
 */
export const FriendsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.
         * @summary Delete Friend Request
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendRequest: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteFriendRequest', 'userId', userId)
            const localVarPath = `/user/{userId}/friendRequest`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a friend request to another user.
         * @summary Send Friend Request
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friend: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('friend', 'userId', userId)
            const localVarPath = `/user/{userId}/friendRequest`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.
         * @summary Check Friend Status
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriendStatus: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getFriendStatus', 'userId', userId)
            const localVarPath = `/user/{userId}/friendStatus`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List information about friends.
         * @summary List Friends
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {boolean} [offline] Returns *only* offline users if true, returns only online and active users if false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriends: async (offset?: number, n?: number, offline?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/friends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offline !== undefined) {
                localVarQueryParameter['offline'] = offline;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unfriend a user by ID.
         * @summary Unfriend
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfriend: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('unfriend', 'userId', userId)
            const localVarPath = `/auth/user/friends/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendsApi - functional programming interface
 * @export
 */
export const FriendsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FriendsApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.
         * @summary Delete Friend Request
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFriendRequest(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFriendRequest(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send a friend request to another user.
         * @summary Send Friend Request
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async friend(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.friend(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.
         * @summary Check Friend Status
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFriendStatus(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFriendStatus(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List information about friends.
         * @summary List Friends
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {boolean} [offline] Returns *only* offline users if true, returns only online and active users if false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFriends(offset?: number, n?: number, offline?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFriends(offset, n, offline, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unfriend a user by ID.
         * @summary Unfriend
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfriend(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfriend(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FriendsApi - factory interface
 * @export
 */
export const FriendsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FriendsApiFp(configuration)
    return {
        /**
         * Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.
         * @summary Delete Friend Request
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendRequest(userId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.deleteFriendRequest(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a friend request to another user.
         * @summary Send Friend Request
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friend(userId: string, options?: any): AxiosPromise<Notification> {
            return localVarFp.friend(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.
         * @summary Check Friend Status
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriendStatus(userId: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getFriendStatus(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * List information about friends.
         * @summary List Friends
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {boolean} [offline] Returns *only* offline users if true, returns only online and active users if false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriends(offset?: number, n?: number, offline?: boolean, options?: any): AxiosPromise<Array<LimitedUser>> {
            return localVarFp.getFriends(offset, n, offline, options).then((request) => request(axios, basePath));
        },
        /**
         * Unfriend a user by ID.
         * @summary Unfriend
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfriend(userId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.unfriend(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FriendsApi - object-oriented interface
 * @export
 * @class FriendsApi
 * @extends {BaseAPI}
 */
export class FriendsApi extends BaseAPI {
    /**
     * Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.
     * @summary Delete Friend Request
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public deleteFriendRequest(userId: string, options?: any) {
        return FriendsApiFp(this.configuration).deleteFriendRequest(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a friend request to another user.
     * @summary Send Friend Request
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public friend(userId: string, options?: any) {
        return FriendsApiFp(this.configuration).friend(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.
     * @summary Check Friend Status
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public getFriendStatus(userId: string, options?: any) {
        return FriendsApiFp(this.configuration).getFriendStatus(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List information about friends.
     * @summary List Friends
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {number} [n] The number of objects to return.
     * @param {boolean} [offline] Returns *only* offline users if true, returns only online and active users if false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public getFriends(offset?: number, n?: number, offline?: boolean, options?: any) {
        return FriendsApiFp(this.configuration).getFriends(offset, n, offline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unfriend a user by ID.
     * @summary Unfriend
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public unfriend(userId: string, options?: any) {
        return FriendsApiFp(this.configuration).unfriend(userId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
         * @summary Accept Friend Request
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptFriendRequest: async (notificationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('acceptFriendRequest', 'notificationId', notificationId)
            const localVarPath = `/auth/user/notifications/{notificationId}/accept`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clear **all** notifications.
         * @summary Clear All Notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearNotifications: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/notifications/clear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a notification.
         * @summary Delete Notification
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification: async (notificationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('deleteNotification', 'notificationId', notificationId)
            const localVarPath = `/auth/user/notifications/{notificationId}/hide`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all of the current user\'s notifications.
         * @summary List Notifications
         * @param {string} [type] Only send notifications of this type (can use &#x60;all&#x60; for all).
         * @param {boolean} [sent] Return notifications sent by the user. Must be false or omitted.
         * @param {boolean} [hidden] Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;.
         * @param {string} [after] Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotifications: async (type?: string, sent?: boolean, hidden?: boolean, after?: string, n?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/user/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (sent !== undefined) {
                localVarQueryParameter['sent'] = sent;
            }

            if (hidden !== undefined) {
                localVarQueryParameter['hidden'] = hidden;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark a notification as seen.
         * @summary Mark As Read
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markNotificationAsRead: async (notificationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('markNotificationAsRead', 'notificationId', notificationId)
            const localVarPath = `/auth/user/notifications/{notificationId}/see`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
         * @summary Accept Friend Request
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptFriendRequest(notificationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptFriendRequest(notificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clear **all** notifications.
         * @summary Clear All Notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearNotifications(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Success>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearNotifications(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a notification.
         * @summary Delete Notification
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotification(notificationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNotification(notificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all of the current user\'s notifications.
         * @summary List Notifications
         * @param {string} [type] Only send notifications of this type (can use &#x60;all&#x60; for all).
         * @param {boolean} [sent] Return notifications sent by the user. Must be false or omitted.
         * @param {boolean} [hidden] Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;.
         * @param {string} [after] Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotifications(type?: string, sent?: boolean, hidden?: boolean, after?: string, n?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Notification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotifications(type, sent, hidden, after, n, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark a notification as seen.
         * @summary Mark As Read
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markNotificationAsRead(notificationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markNotificationAsRead(notificationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
         * @summary Accept Friend Request
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptFriendRequest(notificationId: string, options?: any): AxiosPromise<Success> {
            return localVarFp.acceptFriendRequest(notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Clear **all** notifications.
         * @summary Clear All Notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearNotifications(options?: any): AxiosPromise<Success> {
            return localVarFp.clearNotifications(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a notification.
         * @summary Delete Notification
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotification(notificationId: string, options?: any): AxiosPromise<Notification> {
            return localVarFp.deleteNotification(notificationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all of the current user\'s notifications.
         * @summary List Notifications
         * @param {string} [type] Only send notifications of this type (can use &#x60;all&#x60; for all).
         * @param {boolean} [sent] Return notifications sent by the user. Must be false or omitted.
         * @param {boolean} [hidden] Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;.
         * @param {string} [after] Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;.
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotifications(type?: string, sent?: boolean, hidden?: boolean, after?: string, n?: number, offset?: number, options?: any): AxiosPromise<Array<Notification>> {
            return localVarFp.getNotifications(type, sent, hidden, after, n, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark a notification as seen.
         * @summary Mark As Read
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markNotificationAsRead(notificationId: string, options?: any): AxiosPromise<Notification> {
            return localVarFp.markNotificationAsRead(notificationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
     * @summary Accept Friend Request
     * @param {string} notificationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public acceptFriendRequest(notificationId: string, options?: any) {
        return NotificationsApiFp(this.configuration).acceptFriendRequest(notificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clear **all** notifications.
     * @summary Clear All Notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public clearNotifications(options?: any) {
        return NotificationsApiFp(this.configuration).clearNotifications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a notification.
     * @summary Delete Notification
     * @param {string} notificationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public deleteNotification(notificationId: string, options?: any) {
        return NotificationsApiFp(this.configuration).deleteNotification(notificationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all of the current user\'s notifications.
     * @summary List Notifications
     * @param {string} [type] Only send notifications of this type (can use &#x60;all&#x60; for all).
     * @param {boolean} [sent] Return notifications sent by the user. Must be false or omitted.
     * @param {boolean} [hidden] Whether to return hidden or non-hidden notifications. True only allowed on type &#x60;friendRequest&#x60;.
     * @param {string} [after] Only return notifications sent after this Date. Ignored if type is &#x60;friendRequest&#x60;.
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getNotifications(type?: string, sent?: boolean, hidden?: boolean, after?: string, n?: number, offset?: number, options?: any) {
        return NotificationsApiFp(this.configuration).getNotifications(type, sent, hidden, after, n, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark a notification as seen.
     * @summary Mark As Read
     * @param {string} notificationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public markNotificationAsRead(notificationId: string, options?: any) {
        return NotificationsApiFp(this.configuration).markNotificationAsRead(notificationId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API config contains configuration that the clients needs to work properly.  Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
         * @summary Fetch API Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns in plain format the number of currently online users.  **NOTE:** The response type is not of JSON, but is an integer in plain ASCII format.
         * @summary Current Online Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentOnlineUsers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/visits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the overall health status, the server name, and the current build version tag of the API.
         * @summary Check API Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns in plain format the current time of the API server.  **NOTE:** The response type is not of JSON, but is a string in plain ASCII format.
         * @summary Current System Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTime: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * API config contains configuration that the clients needs to work properly.  Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
         * @summary Fetch API Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfig(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Config>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns in plain format the number of currently online users.  **NOTE:** The response type is not of JSON, but is an integer in plain ASCII format.
         * @summary Current Online Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentOnlineUsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentOnlineUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the overall health status, the server name, and the current build version tag of the API.
         * @summary Check API Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHealth(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHealth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns in plain format the current time of the API server.  **NOTE:** The response type is not of JSON, but is a string in plain ASCII format.
         * @summary Current System Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemTime(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemTime(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * API config contains configuration that the clients needs to work properly.  Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
         * @summary Fetch API Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(options?: any): AxiosPromise<Config> {
            return localVarFp.getConfig(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns in plain format the number of currently online users.  **NOTE:** The response type is not of JSON, but is an integer in plain ASCII format.
         * @summary Current Online Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentOnlineUsers(options?: any): AxiosPromise<number> {
            return localVarFp.getCurrentOnlineUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the overall health status, the server name, and the current build version tag of the API.
         * @summary Check API Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth(options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getHealth(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns in plain format the current time of the API server.  **NOTE:** The response type is not of JSON, but is a string in plain ASCII format.
         * @summary Current System Time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemTime(options?: any): AxiosPromise<string> {
            return localVarFp.getSystemTime(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * API config contains configuration that the clients needs to work properly.  Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
     * @summary Fetch API Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getConfig(options?: any) {
        return SystemApiFp(this.configuration).getConfig(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns in plain format the number of currently online users.  **NOTE:** The response type is not of JSON, but is an integer in plain ASCII format.
     * @summary Current Online Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getCurrentOnlineUsers(options?: any) {
        return SystemApiFp(this.configuration).getCurrentOnlineUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the overall health status, the server name, and the current build version tag of the API.
     * @summary Check API Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getHealth(options?: any) {
        return SystemApiFp(this.configuration).getHealth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns in plain format the current time of the API server.  **NOTE:** The response type is not of JSON, but is a string in plain ASCII format.
     * @summary Current System Time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getSystemTime(options?: any) {
        return SystemApiFp(this.configuration).getSystemTime(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get public user information about a specific user using their ID.
         * @summary Get User by ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get public user information about a specific user using their name.
         * @summary Get User by Username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserByName', 'username', username)
            const localVarPath = `/users/{username}/name`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search and list any Active users by text query.  **Has been locked down and now always respond with \"Invalid Admin Credentials\".**
         * @summary Search Active Users
         * @param {string} search Username to search for
         * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchActiveUsers: async (search: string, developerType?: string, offset?: number, n?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('searchActiveUsers', 'search', search)
            const localVarPath = `/users/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (developerType !== undefined) {
                localVarQueryParameter['developerType'] = developerType;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search and list any users by text query
         * @summary Search All Users
         * @param {string} [search] Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing.
         * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsers: async (search?: string, developerType?: string, n?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (developerType !== undefined) {
                localVarQueryParameter['developerType'] = developerType;
            }

            if (n !== undefined) {
                localVarQueryParameter['n'] = n;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a users information such as the email and birthday.
         * @summary Update User Info
         * @param {string} userId 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, inlineObject2?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyCookie required

            // authentication authCookie required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get public user information about a specific user using their ID.
         * @summary Get User by ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get public user information about a specific user using their name.
         * @summary Get User by Username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByName(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByName(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search and list any Active users by text query.  **Has been locked down and now always respond with \"Invalid Admin Credentials\".**
         * @summary Search Active Users
         * @param {string} search Username to search for
         * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async searchActiveUsers(search: string, developerType?: string, offset?: number, n?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchActiveUsers(search, developerType, offset, n, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search and list any users by text query
         * @summary Search All Users
         * @param {string} [search] Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing.
         * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUsers(search?: string, developerType?: string, n?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LimitedUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUsers(search, developerType, n, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a users information such as the email and birthday.
         * @summary Update User Info
         * @param {string} userId 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, inlineObject2?: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Get public user information about a specific user using their ID.
         * @summary Get User by ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get public user information about a specific user using their name.
         * @summary Get User by Username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName(username: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUserByName(username, options).then((request) => request(axios, basePath));
        },
        /**
         * Search and list any Active users by text query.  **Has been locked down and now always respond with \"Invalid Admin Credentials\".**
         * @summary Search Active Users
         * @param {string} search Username to search for
         * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {number} [n] The number of objects to return.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchActiveUsers(search: string, developerType?: string, offset?: number, n?: number, options?: any): AxiosPromise<Array<LimitedUser>> {
            return localVarFp.searchActiveUsers(search, developerType, offset, n, options).then((request) => request(axios, basePath));
        },
        /**
         * Search and list any users by text query
         * @summary Search All Users
         * @param {string} [search] Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing.
         * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
         * @param {number} [n] The number of objects to return.
         * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsers(search?: string, developerType?: string, n?: number, offset?: number, options?: any): AxiosPromise<Array<LimitedUser>> {
            return localVarFp.searchUsers(search, developerType, n, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a users information such as the email and birthday.
         * @summary Update User Info
         * @param {string} userId 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, inlineObject2?: InlineObject2, options?: any): AxiosPromise<CurrentUser> {
            return localVarFp.updateUser(userId, inlineObject2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Get public user information about a specific user using their ID.
     * @summary Get User by ID
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(userId: string, options?: any) {
        return UsersApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get public user information about a specific user using their name.
     * @summary Get User by Username
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserByName(username: string, options?: any) {
        return UsersApiFp(this.configuration).getUserByName(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search and list any Active users by text query.  **Has been locked down and now always respond with \"Invalid Admin Credentials\".**
     * @summary Search Active Users
     * @param {string} search Username to search for
     * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {number} [n] The number of objects to return.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public searchActiveUsers(search: string, developerType?: string, offset?: number, n?: number, options?: any) {
        return UsersApiFp(this.configuration).searchActiveUsers(search, developerType, offset, n, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search and list any users by text query
     * @summary Search All Users
     * @param {string} [search] Searches by &#x60;displayName&#x60;. Will return empty array if search query is empty or missing.
     * @param {string} [developerType] Active user by developer type, none for normal users and internal for moderators
     * @param {number} [n] The number of objects to return.
     * @param {number} [offset] A zero-based offset from the default object sorting from where search results start.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public searchUsers(search?: string, developerType?: string, n?: number, offset?: number, options?: any) {
        return UsersApiFp(this.configuration).searchUsers(search, developerType, n, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a users information such as the email and birthday.
     * @summary Update User Info
     * @param {string} userId 
     * @param {InlineObject2} [inlineObject2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(userId: string, inlineObject2?: InlineObject2, options?: any) {
        return UsersApiFp(this.configuration).updateUser(userId, inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }
}


