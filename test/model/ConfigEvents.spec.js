/**
 * VRChat API Documentation
 * ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)  # VRChat API Documentation This project is an [OPEN Open Source Project](https://openopensource.org)  Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.  ## Disclaimer  This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.  > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:** > * We do not provide documentation or support for the API. > * Do not make queries to the API more than once per 60 seconds. > * Abuse of the API may result in account termination. > * Access to API endpoints may break at any given time, with no warning.  As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.  ## Get in touch with us!  [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: me@ruby.js.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.vrchatapi);
  }
}(this, function(expect, vrchatapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new vrchatapi.ConfigEvents();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConfigEvents', function() {
    it('should create an instance of ConfigEvents', function() {
      // uncomment below and update the code to test ConfigEvents
      //var instane = new vrchatapi.ConfigEvents();
      //expect(instance).to.be.a(vrchatapi.ConfigEvents);
    });

    it('should have the property distanceClose (base name: "distanceClose")', function() {
      // uncomment below and update the code to test the property distanceClose
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

    it('should have the property distanceFactor (base name: "distanceFactor")', function() {
      // uncomment below and update the code to test the property distanceFactor
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

    it('should have the property distanceFar (base name: "distanceFar")', function() {
      // uncomment below and update the code to test the property distanceFar
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

    it('should have the property groupDistance (base name: "groupDistance")', function() {
      // uncomment below and update the code to test the property groupDistance
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

    it('should have the property maximumBunchSize (base name: "maximumBunchSize")', function() {
      // uncomment below and update the code to test the property maximumBunchSize
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

    it('should have the property notVisibleFactor (base name: "notVisibleFactor")', function() {
      // uncomment below and update the code to test the property notVisibleFactor
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

    it('should have the property playerOrderBucketSize (base name: "playerOrderBucketSize")', function() {
      // uncomment below and update the code to test the property playerOrderBucketSize
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

    it('should have the property playerOrderFactor (base name: "playerOrderFactor")', function() {
      // uncomment below and update the code to test the property playerOrderFactor
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

    it('should have the property slowUpdateFactorThreshold (base name: "slowUpdateFactorThreshold")', function() {
      // uncomment below and update the code to test the property slowUpdateFactorThreshold
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

    it('should have the property viewSegmentLength (base name: "viewSegmentLength")', function() {
      // uncomment below and update the code to test the property viewSegmentLength
      //var instance = new vrchatapi.ConfigEvents();
      //expect(instance).to.be();
    });

  });

}));
