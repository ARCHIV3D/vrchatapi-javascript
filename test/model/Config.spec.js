/**
 * VRChat API Documentation
 * ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)  # VRChat API Documentation This project is an [OPEN Open Source Project](https://openopensource.org)  Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.  ## Disclaimer  This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.  > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:** > * We do not provide documentation or support for the API. > * Do not make queries to the API more than once per 60 seconds. > * Abuse of the API may result in account termination. > * Access to API endpoints may break at any given time, with no warning.  As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.  ## Get in touch with us!  [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: me@ruby.js.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.vrchatapi);
  }
}(this, function(expect, vrchatapi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new vrchatapi.Config();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Config', function() {
    it('should create an instance of Config', function() {
      // uncomment below and update the code to test Config
      //var instane = new vrchatapi.Config();
      //expect(instance).to.be.a(vrchatapi.Config);
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property announcements (base name: "announcements")', function() {
      // uncomment below and update the code to test the property announcements
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property apiKey (base name: "apiKey")', function() {
      // uncomment below and update the code to test the property apiKey
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property appName (base name: "appName")', function() {
      // uncomment below and update the code to test the property appName
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property buildVersionTag (base name: "buildVersionTag")', function() {
      // uncomment below and update the code to test the property buildVersionTag
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property clientApiKey (base name: "clientApiKey")', function() {
      // uncomment below and update the code to test the property clientApiKey
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property clientBPSCeiling (base name: "clientBPSCeiling")', function() {
      // uncomment below and update the code to test the property clientBPSCeiling
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property clientDisconnectTimeout (base name: "clientDisconnectTimeout")', function() {
      // uncomment below and update the code to test the property clientDisconnectTimeout
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property clientReservedPlayerBPS (base name: "clientReservedPlayerBPS")', function() {
      // uncomment below and update the code to test the property clientReservedPlayerBPS
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property clientSentCountAllowance (base name: "clientSentCountAllowance")', function() {
      // uncomment below and update the code to test the property clientSentCountAllowance
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property contactEmail (base name: "contactEmail")', function() {
      // uncomment below and update the code to test the property contactEmail
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property copyrightEmail (base name: "copyrightEmail")', function() {
      // uncomment below and update the code to test the property copyrightEmail
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property currentTOSVersion (base name: "currentTOSVersion")', function() {
      // uncomment below and update the code to test the property currentTOSVersion
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property defaultAvatar (base name: "defaultAvatar")', function() {
      // uncomment below and update the code to test the property defaultAvatar
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property deploymentGroup (base name: "deploymentGroup")', function() {
      // uncomment below and update the code to test the property deploymentGroup
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property devAppVersionStandalone (base name: "devAppVersionStandalone")', function() {
      // uncomment below and update the code to test the property devAppVersionStandalone
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property devDownloadLinkWindows (base name: "devDownloadLinkWindows")', function() {
      // uncomment below and update the code to test the property devDownloadLinkWindows
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property devSdkUrl (base name: "devSdkUrl")', function() {
      // uncomment below and update the code to test the property devSdkUrl
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property devSdkVersion (base name: "devSdkVersion")', function() {
      // uncomment below and update the code to test the property devSdkVersion
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property devServerVersionStandalone (base name: "devServerVersionStandalone")', function() {
      // uncomment below and update the code to test the property devServerVersionStandalone
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableAvatarCopying (base name: "disableAvatarCopying")', function() {
      // uncomment below and update the code to test the property disableAvatarCopying
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableAvatarGating (base name: "disableAvatarGating")', function() {
      // uncomment below and update the code to test the property disableAvatarGating
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableCommunityLabs (base name: "disableCommunityLabs")', function() {
      // uncomment below and update the code to test the property disableCommunityLabs
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableCommunityLabsPromotion (base name: "disableCommunityLabsPromotion")', function() {
      // uncomment below and update the code to test the property disableCommunityLabsPromotion
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableEmail (base name: "disableEmail")', function() {
      // uncomment below and update the code to test the property disableEmail
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableEventStream (base name: "disableEventStream")', function() {
      // uncomment below and update the code to test the property disableEventStream
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableFeedbackGating (base name: "disableFeedbackGating")', function() {
      // uncomment below and update the code to test the property disableFeedbackGating
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableHello (base name: "disableHello")', function() {
      // uncomment below and update the code to test the property disableHello
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableRegistration (base name: "disableRegistration")', function() {
      // uncomment below and update the code to test the property disableRegistration
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableSteamNetworking (base name: "disableSteamNetworking")', function() {
      // uncomment below and update the code to test the property disableSteamNetworking
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableTwoFactorAuth (base name: "disableTwoFactorAuth")', function() {
      // uncomment below and update the code to test the property disableTwoFactorAuth
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableUdon (base name: "disableUdon")', function() {
      // uncomment below and update the code to test the property disableUdon
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property disableUpgradeAccount (base name: "disableUpgradeAccount")', function() {
      // uncomment below and update the code to test the property disableUpgradeAccount
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property downloadLinkWindows (base name: "downloadLinkWindows")', function() {
      // uncomment below and update the code to test the property downloadLinkWindows
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property downloadUrls (base name: "downloadUrls")', function() {
      // uncomment below and update the code to test the property downloadUrls
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property dynamicWorldRows (base name: "dynamicWorldRows")', function() {
      // uncomment below and update the code to test the property dynamicWorldRows
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property events (base name: "events")', function() {
      // uncomment below and update the code to test the property events
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property gearDemoRoomId (base name: "gearDemoRoomId")', function() {
      // uncomment below and update the code to test the property gearDemoRoomId
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property homepageRedirectTarget (base name: "homepageRedirectTarget")', function() {
      // uncomment below and update the code to test the property homepageRedirectTarget
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property homeWorldId (base name: "homeWorldId")', function() {
      // uncomment below and update the code to test the property homeWorldId
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property hubWorldId (base name: "hubWorldId")', function() {
      // uncomment below and update the code to test the property hubWorldId
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property jobsEmail (base name: "jobsEmail")', function() {
      // uncomment below and update the code to test the property jobsEmail
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property messageOfTheDay (base name: "messageOfTheDay")', function() {
      // uncomment below and update the code to test the property messageOfTheDay
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property moderationEmail (base name: "moderationEmail")', function() {
      // uncomment below and update the code to test the property moderationEmail
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property moderationQueryPeriod (base name: "moderationQueryPeriod")', function() {
      // uncomment below and update the code to test the property moderationQueryPeriod
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property notAllowedToSelectAvatarInPrivateWorldMessage (base name: "notAllowedToSelectAvatarInPrivateWorldMessage")', function() {
      // uncomment below and update the code to test the property notAllowedToSelectAvatarInPrivateWorldMessage
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property plugin (base name: "plugin")', function() {
      // uncomment below and update the code to test the property plugin
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property releaseAppVersionStandalone (base name: "releaseAppVersionStandalone")', function() {
      // uncomment below and update the code to test the property releaseAppVersionStandalone
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property releaseSdkUrl (base name: "releaseSdkUrl")', function() {
      // uncomment below and update the code to test the property releaseSdkUrl
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property releaseSdkVersion (base name: "releaseSdkVersion")', function() {
      // uncomment below and update the code to test the property releaseSdkVersion
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property releaseServerVersionStandalone (base name: "releaseServerVersionStandalone")', function() {
      // uncomment below and update the code to test the property releaseServerVersionStandalone
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property sdkDeveloperFaqUrl (base name: "sdkDeveloperFaqUrl")', function() {
      // uncomment below and update the code to test the property sdkDeveloperFaqUrl
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property sdkDiscordUrl (base name: "sdkDiscordUrl")', function() {
      // uncomment below and update the code to test the property sdkDiscordUrl
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property sdkNotAllowedToPublishMessage (base name: "sdkNotAllowedToPublishMessage")', function() {
      // uncomment below and update the code to test the property sdkNotAllowedToPublishMessage
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property sdkUnityVersion (base name: "sdkUnityVersion")', function() {
      // uncomment below and update the code to test the property sdkUnityVersion
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property serverName (base name: "serverName")', function() {
      // uncomment below and update the code to test the property serverName
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property supportEmail (base name: "supportEmail")', function() {
      // uncomment below and update the code to test the property supportEmail
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property timeOutWorldId (base name: "timeOutWorldId")', function() {
      // uncomment below and update the code to test the property timeOutWorldId
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property tutorialWorldId (base name: "tutorialWorldId")', function() {
      // uncomment below and update the code to test the property tutorialWorldId
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property updateRateMsMaximum (base name: "updateRateMsMaximum")', function() {
      // uncomment below and update the code to test the property updateRateMsMaximum
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property updateRateMsMinimum (base name: "updateRateMsMinimum")', function() {
      // uncomment below and update the code to test the property updateRateMsMinimum
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property updateRateMsNormal (base name: "updateRateMsNormal")', function() {
      // uncomment below and update the code to test the property updateRateMsNormal
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property updateRateMsUdonManual (base name: "updateRateMsUdonManual")', function() {
      // uncomment below and update the code to test the property updateRateMsUdonManual
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property uploadAnalysisPercent (base name: "uploadAnalysisPercent")', function() {
      // uncomment below and update the code to test the property uploadAnalysisPercent
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property urlList (base name: "urlList")', function() {
      // uncomment below and update the code to test the property urlList
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property useReliableUdpForVoice (base name: "useReliableUdpForVoice")', function() {
      // uncomment below and update the code to test the property useReliableUdpForVoice
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property userUpdatePeriod (base name: "userUpdatePeriod")', function() {
      // uncomment below and update the code to test the property userUpdatePeriod
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property userVerificationDelay (base name: "userVerificationDelay")', function() {
      // uncomment below and update the code to test the property userVerificationDelay
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property userVerificationRetry (base name: "userVerificationRetry")', function() {
      // uncomment below and update the code to test the property userVerificationRetry
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property userVerificationTimeout (base name: "userVerificationTimeout")', function() {
      // uncomment below and update the code to test the property userVerificationTimeout
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property viveWindowsUrl (base name: "viveWindowsUrl")', function() {
      // uncomment below and update the code to test the property viveWindowsUrl
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property whiteListedAssetUrls (base name: "whiteListedAssetUrls")', function() {
      // uncomment below and update the code to test the property whiteListedAssetUrls
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property worldUpdatePeriod (base name: "worldUpdatePeriod")', function() {
      // uncomment below and update the code to test the property worldUpdatePeriod
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property youtubedlHash (base name: "youtubedl-hash")', function() {
      // uncomment below and update the code to test the property youtubedlHash
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

    it('should have the property youtubedlVersion (base name: "youtubedl-version")', function() {
      // uncomment below and update the code to test the property youtubedlVersion
      //var instance = new vrchatapi.Config();
      //expect(instance).to.be();
    });

  });

}));
