/**
 * VRChat API Documentation
 * ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)  # VRChat API Documentation This project is an [OPEN Open Source Project](https://openopensource.org)  Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.  ## Disclaimer  This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.  > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:** > * We do not provide documentation or support for the API. > * Do not make queries to the API more than once per 60 seconds. > * Abuse of the API may result in account termination. > * Access to API endpoints may break at any given time, with no warning.  As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.  ## Get in touch with us!  [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: me@ruby.js.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeveloperType from './DeveloperType';
import UserState from './UserState';
import UserStatus from './UserStatus';

/**
 * The CurrentUser model module.
 * @module model/CurrentUser
 * @version 1.0.0
 */
class CurrentUser {
    /**
     * Constructs a new <code>CurrentUser</code>.
     * @alias module:model/CurrentUser
     * @param id {String} 
     * @param username {String} 
     * @param displayName {String} 
     * @param userIcon {String} 
     * @param bio {String} 
     * @param bioLinks {Array.<String>} 
     * @param profilePicOverride {String} 
     * @param statusDescription {String} 
     * @param pastDisplayNames {Array.<String>} 
     * @param hasEmail {Boolean} 
     * @param hasPendingEmail {Boolean} 
     * @param obfuscatedEmail {String} 
     * @param obfuscatedPendingEmail {String} 
     * @param emailVerified {Boolean} 
     * @param hasBirthday {Boolean} 
     * @param unsubscribe {Boolean} 
     * @param statusHistory {Array.<String>} 
     * @param statusFirstTime {Boolean} 
     * @param friends {Array.<String>} 
     * @param friendGroupNames {Array.<String>} 
     * @param currentAvatarImageUrl {String} 
     * @param currentAvatarThumbnailImageUrl {String} 
     * @param fallbackAvatar {String} 
     * @param currentAvatar {String} 
     * @param currentAvatarAssetUrl {String} 
     * @param acceptedTOSVersion {Number} 
     * @param steamId {String} 
     * @param steamDetails {Object} 
     * @param oculusId {String} 
     * @param hasLoggedInFromClient {Boolean} 
     * @param homeLocation {String} 
     * @param twoFactorAuthEnabled {Boolean} 
     * @param state {module:model/UserState} 
     * @param tags {Array.<String>} 
     * @param developerType {module:model/DeveloperType} 
     * @param lastLogin {Date} 
     * @param lastPlatform {String} 
     * @param allowAvatarCopying {Boolean} 
     * @param status {module:model/UserStatus} 
     * @param dateJoined {Date} 
     * @param isFriend {Boolean} 
     * @param friendKey {String} 
     * @param onlineFriends {Array.<String>} 
     * @param activeFriends {Array.<String>} 
     * @param offlineFriends {Array.<String>} 
     */
    constructor(id, username, displayName, userIcon, bio, bioLinks, profilePicOverride, statusDescription, pastDisplayNames, hasEmail, hasPendingEmail, obfuscatedEmail, obfuscatedPendingEmail, emailVerified, hasBirthday, unsubscribe, statusHistory, statusFirstTime, friends, friendGroupNames, currentAvatarImageUrl, currentAvatarThumbnailImageUrl, fallbackAvatar, currentAvatar, currentAvatarAssetUrl, acceptedTOSVersion, steamId, steamDetails, oculusId, hasLoggedInFromClient, homeLocation, twoFactorAuthEnabled, state, tags, developerType, lastLogin, lastPlatform, allowAvatarCopying, status, dateJoined, isFriend, friendKey, onlineFriends, activeFriends, offlineFriends) { 
        
        CurrentUser.initialize(this, id, username, displayName, userIcon, bio, bioLinks, profilePicOverride, statusDescription, pastDisplayNames, hasEmail, hasPendingEmail, obfuscatedEmail, obfuscatedPendingEmail, emailVerified, hasBirthday, unsubscribe, statusHistory, statusFirstTime, friends, friendGroupNames, currentAvatarImageUrl, currentAvatarThumbnailImageUrl, fallbackAvatar, currentAvatar, currentAvatarAssetUrl, acceptedTOSVersion, steamId, steamDetails, oculusId, hasLoggedInFromClient, homeLocation, twoFactorAuthEnabled, state, tags, developerType, lastLogin, lastPlatform, allowAvatarCopying, status, dateJoined, isFriend, friendKey, onlineFriends, activeFriends, offlineFriends);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, username, displayName, userIcon, bio, bioLinks, profilePicOverride, statusDescription, pastDisplayNames, hasEmail, hasPendingEmail, obfuscatedEmail, obfuscatedPendingEmail, emailVerified, hasBirthday, unsubscribe, statusHistory, statusFirstTime, friends, friendGroupNames, currentAvatarImageUrl, currentAvatarThumbnailImageUrl, fallbackAvatar, currentAvatar, currentAvatarAssetUrl, acceptedTOSVersion, steamId, steamDetails, oculusId, hasLoggedInFromClient, homeLocation, twoFactorAuthEnabled, state, tags, developerType, lastLogin, lastPlatform, allowAvatarCopying, status, dateJoined, isFriend, friendKey, onlineFriends, activeFriends, offlineFriends) { 
        obj['id'] = id;
        obj['username'] = username;
        obj['displayName'] = displayName;
        obj['userIcon'] = userIcon;
        obj['bio'] = bio;
        obj['bioLinks'] = bioLinks;
        obj['profilePicOverride'] = profilePicOverride;
        obj['statusDescription'] = statusDescription;
        obj['pastDisplayNames'] = pastDisplayNames;
        obj['hasEmail'] = hasEmail;
        obj['hasPendingEmail'] = hasPendingEmail;
        obj['obfuscatedEmail'] = obfuscatedEmail;
        obj['obfuscatedPendingEmail'] = obfuscatedPendingEmail;
        obj['emailVerified'] = emailVerified;
        obj['hasBirthday'] = hasBirthday;
        obj['unsubscribe'] = unsubscribe;
        obj['statusHistory'] = statusHistory;
        obj['statusFirstTime'] = statusFirstTime;
        obj['friends'] = friends;
        obj['friendGroupNames'] = friendGroupNames;
        obj['currentAvatarImageUrl'] = currentAvatarImageUrl;
        obj['currentAvatarThumbnailImageUrl'] = currentAvatarThumbnailImageUrl;
        obj['fallbackAvatar'] = fallbackAvatar;
        obj['currentAvatar'] = currentAvatar;
        obj['currentAvatarAssetUrl'] = currentAvatarAssetUrl;
        obj['acceptedTOSVersion'] = acceptedTOSVersion;
        obj['steamId'] = steamId;
        obj['steamDetails'] = steamDetails;
        obj['oculusId'] = oculusId;
        obj['hasLoggedInFromClient'] = hasLoggedInFromClient;
        obj['homeLocation'] = homeLocation;
        obj['twoFactorAuthEnabled'] = twoFactorAuthEnabled;
        obj['state'] = state;
        obj['tags'] = tags;
        obj['developerType'] = developerType;
        obj['last_login'] = lastLogin;
        obj['last_platform'] = lastPlatform;
        obj['allowAvatarCopying'] = allowAvatarCopying;
        obj['status'] = status;
        obj['date_joined'] = dateJoined;
        obj['isFriend'] = isFriend || false;
        obj['friendKey'] = friendKey;
        obj['onlineFriends'] = onlineFriends;
        obj['activeFriends'] = activeFriends;
        obj['offlineFriends'] = offlineFriends;
    }

    /**
     * Constructs a <code>CurrentUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CurrentUser} obj Optional instance to populate.
     * @return {module:model/CurrentUser} The populated <code>CurrentUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CurrentUser();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('userIcon')) {
                obj['userIcon'] = ApiClient.convertToType(data['userIcon'], 'String');
            }
            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('bioLinks')) {
                obj['bioLinks'] = ApiClient.convertToType(data['bioLinks'], ['String']);
            }
            if (data.hasOwnProperty('profilePicOverride')) {
                obj['profilePicOverride'] = ApiClient.convertToType(data['profilePicOverride'], 'String');
            }
            if (data.hasOwnProperty('statusDescription')) {
                obj['statusDescription'] = ApiClient.convertToType(data['statusDescription'], 'String');
            }
            if (data.hasOwnProperty('pastDisplayNames')) {
                obj['pastDisplayNames'] = ApiClient.convertToType(data['pastDisplayNames'], ['String']);
            }
            if (data.hasOwnProperty('hasEmail')) {
                obj['hasEmail'] = ApiClient.convertToType(data['hasEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('hasPendingEmail')) {
                obj['hasPendingEmail'] = ApiClient.convertToType(data['hasPendingEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('obfuscatedEmail')) {
                obj['obfuscatedEmail'] = ApiClient.convertToType(data['obfuscatedEmail'], 'String');
            }
            if (data.hasOwnProperty('obfuscatedPendingEmail')) {
                obj['obfuscatedPendingEmail'] = ApiClient.convertToType(data['obfuscatedPendingEmail'], 'String');
            }
            if (data.hasOwnProperty('emailVerified')) {
                obj['emailVerified'] = ApiClient.convertToType(data['emailVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('hasBirthday')) {
                obj['hasBirthday'] = ApiClient.convertToType(data['hasBirthday'], 'Boolean');
            }
            if (data.hasOwnProperty('unsubscribe')) {
                obj['unsubscribe'] = ApiClient.convertToType(data['unsubscribe'], 'Boolean');
            }
            if (data.hasOwnProperty('statusHistory')) {
                obj['statusHistory'] = ApiClient.convertToType(data['statusHistory'], ['String']);
            }
            if (data.hasOwnProperty('statusFirstTime')) {
                obj['statusFirstTime'] = ApiClient.convertToType(data['statusFirstTime'], 'Boolean');
            }
            if (data.hasOwnProperty('friends')) {
                obj['friends'] = ApiClient.convertToType(data['friends'], ['String']);
            }
            if (data.hasOwnProperty('friendGroupNames')) {
                obj['friendGroupNames'] = ApiClient.convertToType(data['friendGroupNames'], ['String']);
            }
            if (data.hasOwnProperty('currentAvatarImageUrl')) {
                obj['currentAvatarImageUrl'] = ApiClient.convertToType(data['currentAvatarImageUrl'], 'String');
            }
            if (data.hasOwnProperty('currentAvatarThumbnailImageUrl')) {
                obj['currentAvatarThumbnailImageUrl'] = ApiClient.convertToType(data['currentAvatarThumbnailImageUrl'], 'String');
            }
            if (data.hasOwnProperty('fallbackAvatar')) {
                obj['fallbackAvatar'] = ApiClient.convertToType(data['fallbackAvatar'], 'String');
            }
            if (data.hasOwnProperty('currentAvatar')) {
                obj['currentAvatar'] = ApiClient.convertToType(data['currentAvatar'], 'String');
            }
            if (data.hasOwnProperty('currentAvatarAssetUrl')) {
                obj['currentAvatarAssetUrl'] = ApiClient.convertToType(data['currentAvatarAssetUrl'], 'String');
            }
            if (data.hasOwnProperty('accountDeletionDate')) {
                obj['accountDeletionDate'] = ApiClient.convertToType(data['accountDeletionDate'], 'Date');
            }
            if (data.hasOwnProperty('acceptedTOSVersion')) {
                obj['acceptedTOSVersion'] = ApiClient.convertToType(data['acceptedTOSVersion'], 'Number');
            }
            if (data.hasOwnProperty('steamId')) {
                obj['steamId'] = ApiClient.convertToType(data['steamId'], 'String');
            }
            if (data.hasOwnProperty('steamDetails')) {
                obj['steamDetails'] = ApiClient.convertToType(data['steamDetails'], Object);
            }
            if (data.hasOwnProperty('oculusId')) {
                obj['oculusId'] = ApiClient.convertToType(data['oculusId'], 'String');
            }
            if (data.hasOwnProperty('hasLoggedInFromClient')) {
                obj['hasLoggedInFromClient'] = ApiClient.convertToType(data['hasLoggedInFromClient'], 'Boolean');
            }
            if (data.hasOwnProperty('homeLocation')) {
                obj['homeLocation'] = ApiClient.convertToType(data['homeLocation'], 'String');
            }
            if (data.hasOwnProperty('twoFactorAuthEnabled')) {
                obj['twoFactorAuthEnabled'] = ApiClient.convertToType(data['twoFactorAuthEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = UserState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('developerType')) {
                obj['developerType'] = DeveloperType.constructFromObject(data['developerType']);
            }
            if (data.hasOwnProperty('last_login')) {
                obj['last_login'] = ApiClient.convertToType(data['last_login'], 'Date');
            }
            if (data.hasOwnProperty('last_platform')) {
                obj['last_platform'] = ApiClient.convertToType(data['last_platform'], 'String');
            }
            if (data.hasOwnProperty('allowAvatarCopying')) {
                obj['allowAvatarCopying'] = ApiClient.convertToType(data['allowAvatarCopying'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = UserStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('date_joined')) {
                obj['date_joined'] = ApiClient.convertToType(data['date_joined'], 'Date');
            }
            if (data.hasOwnProperty('isFriend')) {
                obj['isFriend'] = ApiClient.convertToType(data['isFriend'], 'Boolean');
            }
            if (data.hasOwnProperty('friendKey')) {
                obj['friendKey'] = ApiClient.convertToType(data['friendKey'], 'String');
            }
            if (data.hasOwnProperty('onlineFriends')) {
                obj['onlineFriends'] = ApiClient.convertToType(data['onlineFriends'], ['String']);
            }
            if (data.hasOwnProperty('activeFriends')) {
                obj['activeFriends'] = ApiClient.convertToType(data['activeFriends'], ['String']);
            }
            if (data.hasOwnProperty('offlineFriends')) {
                obj['offlineFriends'] = ApiClient.convertToType(data['offlineFriends'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
CurrentUser.prototype['id'] = undefined;

/**
 * @member {String} username
 */
CurrentUser.prototype['username'] = undefined;

/**
 * @member {String} displayName
 */
CurrentUser.prototype['displayName'] = undefined;

/**
 * @member {String} userIcon
 */
CurrentUser.prototype['userIcon'] = undefined;

/**
 * @member {String} bio
 */
CurrentUser.prototype['bio'] = undefined;

/**
 * @member {Array.<String>} bioLinks
 */
CurrentUser.prototype['bioLinks'] = undefined;

/**
 * @member {String} profilePicOverride
 */
CurrentUser.prototype['profilePicOverride'] = undefined;

/**
 * @member {String} statusDescription
 */
CurrentUser.prototype['statusDescription'] = undefined;

/**
 * @member {Array.<String>} pastDisplayNames
 */
CurrentUser.prototype['pastDisplayNames'] = undefined;

/**
 * @member {Boolean} hasEmail
 */
CurrentUser.prototype['hasEmail'] = undefined;

/**
 * @member {Boolean} hasPendingEmail
 */
CurrentUser.prototype['hasPendingEmail'] = undefined;

/**
 * @member {String} obfuscatedEmail
 */
CurrentUser.prototype['obfuscatedEmail'] = undefined;

/**
 * @member {String} obfuscatedPendingEmail
 */
CurrentUser.prototype['obfuscatedPendingEmail'] = undefined;

/**
 * @member {Boolean} emailVerified
 */
CurrentUser.prototype['emailVerified'] = undefined;

/**
 * @member {Boolean} hasBirthday
 */
CurrentUser.prototype['hasBirthday'] = undefined;

/**
 * @member {Boolean} unsubscribe
 */
CurrentUser.prototype['unsubscribe'] = undefined;

/**
 * @member {Array.<String>} statusHistory
 */
CurrentUser.prototype['statusHistory'] = undefined;

/**
 * @member {Boolean} statusFirstTime
 */
CurrentUser.prototype['statusFirstTime'] = undefined;

/**
 * @member {Array.<String>} friends
 */
CurrentUser.prototype['friends'] = undefined;

/**
 * @member {Array.<String>} friendGroupNames
 */
CurrentUser.prototype['friendGroupNames'] = undefined;

/**
 * @member {String} currentAvatarImageUrl
 */
CurrentUser.prototype['currentAvatarImageUrl'] = undefined;

/**
 * @member {String} currentAvatarThumbnailImageUrl
 */
CurrentUser.prototype['currentAvatarThumbnailImageUrl'] = undefined;

/**
 * @member {String} fallbackAvatar
 */
CurrentUser.prototype['fallbackAvatar'] = undefined;

/**
 * @member {String} currentAvatar
 */
CurrentUser.prototype['currentAvatar'] = undefined;

/**
 * @member {String} currentAvatarAssetUrl
 */
CurrentUser.prototype['currentAvatarAssetUrl'] = undefined;

/**
 * @member {Date} accountDeletionDate
 */
CurrentUser.prototype['accountDeletionDate'] = undefined;

/**
 * @member {Number} acceptedTOSVersion
 */
CurrentUser.prototype['acceptedTOSVersion'] = undefined;

/**
 * @member {String} steamId
 */
CurrentUser.prototype['steamId'] = undefined;

/**
 * @member {Object} steamDetails
 */
CurrentUser.prototype['steamDetails'] = undefined;

/**
 * @member {String} oculusId
 */
CurrentUser.prototype['oculusId'] = undefined;

/**
 * @member {Boolean} hasLoggedInFromClient
 */
CurrentUser.prototype['hasLoggedInFromClient'] = undefined;

/**
 * @member {String} homeLocation
 */
CurrentUser.prototype['homeLocation'] = undefined;

/**
 * @member {Boolean} twoFactorAuthEnabled
 */
CurrentUser.prototype['twoFactorAuthEnabled'] = undefined;

/**
 * @member {module:model/UserState} state
 */
CurrentUser.prototype['state'] = undefined;

/**
 * @member {Array.<String>} tags
 */
CurrentUser.prototype['tags'] = undefined;

/**
 * @member {module:model/DeveloperType} developerType
 */
CurrentUser.prototype['developerType'] = undefined;

/**
 * @member {Date} last_login
 */
CurrentUser.prototype['last_login'] = undefined;

/**
 * @member {String} last_platform
 */
CurrentUser.prototype['last_platform'] = undefined;

/**
 * @member {Boolean} allowAvatarCopying
 */
CurrentUser.prototype['allowAvatarCopying'] = undefined;

/**
 * @member {module:model/UserStatus} status
 */
CurrentUser.prototype['status'] = undefined;

/**
 * @member {Date} date_joined
 */
CurrentUser.prototype['date_joined'] = undefined;

/**
 * @member {Boolean} isFriend
 * @default false
 */
CurrentUser.prototype['isFriend'] = false;

/**
 * @member {String} friendKey
 */
CurrentUser.prototype['friendKey'] = undefined;

/**
 * @member {Array.<String>} onlineFriends
 */
CurrentUser.prototype['onlineFriends'] = undefined;

/**
 * @member {Array.<String>} activeFriends
 */
CurrentUser.prototype['activeFriends'] = undefined;

/**
 * @member {Array.<String>} offlineFriends
 */
CurrentUser.prototype['offlineFriends'] = undefined;






export default CurrentUser;

