/**
 * VRChat API Documentation
 * ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)  # VRChat API Documentation This project is an [OPEN Open Source Project](https://openopensource.org)  Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.  ## Disclaimer  This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.  > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:** > * We do not provide documentation or support for the API. > * Do not make queries to the API more than once per 60 seconds. > * Abuse of the API may result in account termination. > * Access to API endpoints may break at any given time, with no warning.  As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.  ## Get in touch with us!  [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: me@ruby.js.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse401 from '../model/InlineResponse401';
import LimitedWorld from '../model/LimitedWorld';

/**
* Worlds service.
* @module api/WorldsApi
* @version 1.0.0
*/
export default class WorldsApi {

    /**
    * Constructs a new WorldsApi. 
    * @alias module:api/WorldsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Search all worlds
     * Search and list any worlds by text query
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.featured is the world featured
     * @param {module:model/String} opts.sort  (default to 'order')
     * @param {String} opts.user Set to `me` for searching own worlds
     * @param {String} opts.userId Filter by creator id, use `me` for only worlds owned by current user
     * @param {Number} opts.n The number of objects to return. (default to 60)
     * @param {module:model/String} opts.order  (default to 'descending')
     * @param {Number} opts.offset A zero-based offset from the default object sorting from where search results start.
     * @param {String} opts.search Searches by `name`. Will return empty array if search query is empty or missing.
     * @param {Array.<String>} opts.tag Filter by Tag
     * @param {Array.<String>} opts.notag Tags to exclude
     * @param {module:model/String} opts.releaseStatus  (default to 'hidden')
     * @param {String} opts.maxUnityVersion Current unity version the game is using
     * @param {String} opts.minUnityVersion The min unity version the world support
     * @param {String} opts.maxAssetVersion Current asset version the game is using
     * @param {String} opts.minAssetVersion The min asset version the world support
     * @param {String} opts.platform The platform the world supports (usually standalonewindows)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LimitedWorld>} and HTTP response
     */
    searchWorldsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'featured': opts['featured'],
        'sort': opts['sort'],
        'user': opts['user'],
        'userId': opts['userId'],
        'n': opts['n'],
        'order': opts['order'],
        'offset': opts['offset'],
        'search': opts['search'],
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'notag': this.apiClient.buildCollectionParam(opts['notag'], 'multi'),
        'releaseStatus': opts['releaseStatus'],
        'maxUnityVersion': opts['maxUnityVersion'],
        'minUnityVersion': opts['minUnityVersion'],
        'maxAssetVersion': opts['maxAssetVersion'],
        'minAssetVersion': opts['minAssetVersion'],
        'platform': opts['platform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyCookie', 'authCookie'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LimitedWorld];
      return this.apiClient.callApi(
        '/worlds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search all worlds
     * Search and list any worlds by text query
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.featured is the world featured
     * @param {module:model/String} opts.sort  (default to 'order')
     * @param {String} opts.user Set to `me` for searching own worlds
     * @param {String} opts.userId Filter by creator id, use `me` for only worlds owned by current user
     * @param {Number} opts.n The number of objects to return. (default to 60)
     * @param {module:model/String} opts.order  (default to 'descending')
     * @param {Number} opts.offset A zero-based offset from the default object sorting from where search results start.
     * @param {String} opts.search Searches by `name`. Will return empty array if search query is empty or missing.
     * @param {Array.<String>} opts.tag Filter by Tag
     * @param {Array.<String>} opts.notag Tags to exclude
     * @param {module:model/String} opts.releaseStatus  (default to 'hidden')
     * @param {String} opts.maxUnityVersion Current unity version the game is using
     * @param {String} opts.minUnityVersion The min unity version the world support
     * @param {String} opts.maxAssetVersion Current asset version the game is using
     * @param {String} opts.minAssetVersion The min asset version the world support
     * @param {String} opts.platform The platform the world supports (usually standalonewindows)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LimitedWorld>}
     */
    searchWorlds(opts) {
      return this.searchWorldsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
