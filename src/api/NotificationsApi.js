/**
 * VRChat API Documentation
 * ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)  # VRChat API Documentation This project is an [OPEN Open Source Project](https://openopensource.org)  Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.  ## Disclaimer  This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.  > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:** > * We do not provide documentation or support for the API. > * Do not make queries to the API more than once per 60 seconds. > * Abuse of the API may result in account termination. > * Access to API endpoints may break at any given time, with no warning.  As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.  ## Get in touch with us!  [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: me@ruby.js.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import InlineResponse401 from '../model/InlineResponse401';
import Notification from '../model/Notification';
import Success from '../model/Success';

/**
* Notifications service.
* @module api/NotificationsApi
* @version 1.0.0
*/
export default class NotificationsApi {

    /**
    * Constructs a new NotificationsApi. 
    * @alias module:api/NotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Accept Friend Request
     * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
     * @param {String} notificationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Success} and HTTP response
     */
    acceptFriendRequestWithHttpInfo(notificationId) {
      let postBody = null;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling acceptFriendRequest");
      }

      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyCookie', 'authCookie'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/auth/user/notifications/{notificationId}/accept', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Accept Friend Request
     * Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
     * @param {String} notificationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Success}
     */
    acceptFriendRequest(notificationId) {
      return this.acceptFriendRequestWithHttpInfo(notificationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear All Notifications
     * Clear **all** notifications.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Success} and HTTP response
     */
    clearNotificationsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyCookie', 'authCookie'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/auth/user/notifications/clear', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clear All Notifications
     * Clear **all** notifications.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Success}
     */
    clearNotifications() {
      return this.clearNotificationsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Notification
     * Delete a notification.
     * @param {String} notificationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Notification} and HTTP response
     */
    deleteNotificationWithHttpInfo(notificationId) {
      let postBody = null;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling deleteNotification");
      }

      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyCookie', 'authCookie'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/auth/user/notifications/{notificationId}/hide', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Notification
     * Delete a notification.
     * @param {String} notificationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Notification}
     */
    deleteNotification(notificationId) {
      return this.deleteNotificationWithHttpInfo(notificationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Notifications
     * Retrieve all of the current user's notifications.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Only send notifications of this type (can use `all` for all).
     * @param {Boolean} opts.sent Return notifications sent by the user. Must be false or omitted.
     * @param {Boolean} opts.hidden Whether to return hidden or non-hidden notifications. True only allowed on type `friendRequest`.
     * @param {String} opts.after Only return notifications sent after this Date. Ignored if type is `friendRequest`.
     * @param {Number} opts.n The number of objects to return. (default to 60)
     * @param {Number} opts.offset A zero-based offset from the default object sorting from where search results start.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Notification>} and HTTP response
     */
    getNotificationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'sent': opts['sent'],
        'hidden': opts['hidden'],
        'after': opts['after'],
        'n': opts['n'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyCookie', 'authCookie'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Notification];
      return this.apiClient.callApi(
        '/auth/user/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Notifications
     * Retrieve all of the current user's notifications.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type Only send notifications of this type (can use `all` for all).
     * @param {Boolean} opts.sent Return notifications sent by the user. Must be false or omitted.
     * @param {Boolean} opts.hidden Whether to return hidden or non-hidden notifications. True only allowed on type `friendRequest`.
     * @param {String} opts.after Only return notifications sent after this Date. Ignored if type is `friendRequest`.
     * @param {Number} opts.n The number of objects to return. (default to 60)
     * @param {Number} opts.offset A zero-based offset from the default object sorting from where search results start.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Notification>}
     */
    getNotifications(opts) {
      return this.getNotificationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mark As Read
     * Mark a notification as seen.
     * @param {String} notificationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Notification} and HTTP response
     */
    markNotificationAsReadWithHttpInfo(notificationId) {
      let postBody = null;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling markNotificationAsRead");
      }

      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyCookie', 'authCookie'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/auth/user/notifications/{notificationId}/see', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Mark As Read
     * Mark a notification as seen.
     * @param {String} notificationId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Notification}
     */
    markNotificationAsRead(notificationId) {
      return this.markNotificationAsReadWithHttpInfo(notificationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
